{"ast":null,"code":"import { tasksAPI } from \"../api/todolistsApi\";\nimport { setAppError, setAppStatus } from \"./appReducer\";\nimport axios from \"axios/index\";\nimport { handlerServerAppError } from \"../common/utils/errorUtils\";\nconst initialState = {};\nexport const tasksReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"SET_TASKS\":\n      return { ...state,\n        [action.todolistId]: action.tasks\n      };\n\n    case 'ADD_TASK':\n      {\n        return { ...state,\n          [action.payload.todolistId]: [action.payload.task, ...state[action.payload.todolistId]]\n        };\n      }\n\n    case 'SET_TODOLISTS':\n      {\n        let copyState = { ...state\n        };\n        action.todolists.forEach(t => {\n          copyState[t.id] = [];\n        });\n        return copyState;\n      }\n\n    case 'ADD_TODOLIST':\n      {\n        return { ...state,\n          [action.newTitle.id]: []\n        };\n      }\n\n    case 'REMOVE_TODOLIST':\n      {\n        const copyState = { ...state\n        };\n        delete copyState[action.todolistID];\n        return copyState;\n      }\n\n    case 'REMOVE_TASK':\n      {\n        return { ...state,\n          [action.payload.todolistId]: state[action.payload.todolistId].filter(el => el.id !== action.payload.taskId)\n        };\n      }\n\n    case 'CHANGE_STATUS':\n      {\n        return { ...state,\n          [action.payload.todolistId]: state[action.payload.todolistId].map(el => el.id === action.payload.taskId ? { ...el,\n            ...action.payload.model\n          } : el)\n        };\n      }\n\n    default:\n      return state;\n  }\n}; // types\n\n//actions\nexport const setTasksAC = (todolistId, tasks) => ({\n  type: 'SET_TASKS',\n  todolistId,\n  tasks\n});\nexport const addTaskAC = (todolistId, task) => ({\n  type: 'ADD_TASK',\n  payload: {\n    todolistId,\n    task\n  }\n});\nexport const removeTaskAC = (todolistId, taskId) => {\n  return {\n    type: 'REMOVE_TASK',\n    payload: {\n      todolistId,\n      taskId\n    }\n  };\n};\nexport const changeStatusAC = (todolistId, taskId, model) => {\n  return {\n    type: 'CHANGE_STATUS',\n    payload: {\n      todolistId,\n      taskId,\n      model\n    }\n  };\n}; //thunks\n\nexport const fetchTasksTC = todoListID => async dispatch => {\n  try {\n    let response = await tasksAPI.getTasks(todoListID);\n    dispatch(setTasksAC(todoListID, response.data.items));\n  } catch (e) {\n    let err = e;\n\n    if (axios.isAxiosError(err)) {\n      var _err$response;\n\n      const error = ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) ? err.response.data.error : err.message;\n      dispatch(setAppError(error));\n    }\n  }\n};\nexport const createTaskTC = (todolistId, title) => async dispatch => {\n  dispatch(setAppStatus('loading'));\n\n  try {\n    const response = await tasksAPI.addTask(todolistId, title);\n    const task = response.data.data.item;\n\n    if (response.data.resultCode === 0) {\n      dispatch(addTaskAC(todolistId, task));\n    } else {\n      handlerServerAppError(dispatch, response.data);\n    }\n  } catch (e) {\n    let err = e;\n\n    if (axios.isAxiosError(err)) {\n      var _err$response2;\n\n      const error = ((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : _err$response2.data) ? err.response.data.error : err.message;\n      dispatch(setAppError(error));\n    }\n  } finally {\n    dispatch(setAppStatus('succeeded'));\n  }\n};\nexport const removeTaskTC = (todolistId, taskId) => async dispatch => {\n  dispatch(setAppStatus('loading'));\n\n  try {\n    const response = await tasksAPI.removeTask(todolistId, taskId);\n\n    if (response.data.resultCode === 0) {\n      dispatch(removeTaskAC(todolistId, taskId));\n    } else {\n      if (response.data.messages.length) {\n        dispatch(setAppError(response.data.messages[0]));\n      } else {\n        dispatch(setAppError('Some error'));\n      }\n    }\n  } catch (e) {\n    let err = e;\n\n    if (axios.isAxiosError(err)) {\n      var _err$response3;\n\n      const error = ((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : _err$response3.data) ? err.response.data.error : err.message;\n      dispatch(setAppError(error));\n    }\n  } finally {\n    dispatch(setAppStatus('succeeded'));\n  }\n};\nexport const updateStatusTC = (todolistId, taskId, status) => async (dispatch, getState) => {\n  const task = getState().tasks[todolistId].find(t => t.id === taskId);\n\n  if (task) {\n    const model = {\n      title: task.title,\n      description: task.description,\n      priority: task.priority,\n      startDate: task.startDate,\n      deadline: task.deadline,\n      status\n    };\n    dispatch(setAppStatus('loading'));\n\n    try {\n      const response = await tasksAPI.updateTask(todolistId, taskId, model);\n\n      if (response.data.resultCode === ResponseStatusCode.success) {\n        dispatch(changeStatusAC(todolistId, taskId, model));\n      } else {\n        if (response.data.messages.length) {\n          dispatch(setAppError(response.data.messages[0]));\n        } else {\n          dispatch(setAppError('Some error'));\n        }\n      }\n    } catch (e) {\n      let err = e;\n\n      if (axios.isAxiosError(err)) {\n        var _err$response4;\n\n        const error = ((_err$response4 = err.response) === null || _err$response4 === void 0 ? void 0 : _err$response4.data) ? err.response.data.error : err.message;\n        dispatch(setAppError(error));\n      }\n    } finally {\n      dispatch(setAppStatus('succeeded'));\n    }\n  }\n};\nexport const updateTitleTC = (todolistId, taskId, title) => async (dispatch, getState) => {\n  const task = getState().tasks[todolistId].find(t => t.id === taskId);\n\n  if (task) {\n    const model = {\n      description: task.description,\n      priority: task.priority,\n      startDate: task.startDate,\n      deadline: task.deadline,\n      status: task.status,\n      title\n    };\n    dispatch(setAppStatus('loading'));\n\n    try {\n      const response = await tasksAPI.updateTask(todolistId, taskId, model);\n\n      if (response.data.resultCode === ResponseStatusCode.success) {\n        dispatch(changeStatusAC(todolistId, taskId, model));\n      } else {\n        if (response.data.messages.length) {\n          dispatch(setAppError(response.data.messages[0]));\n        } else {\n          dispatch(setAppError('Some error'));\n        }\n      }\n    } catch (e) {\n      let err = e;\n\n      if (axios.isAxiosError(err)) {\n        var _err$response5;\n\n        const error = ((_err$response5 = err.response) === null || _err$response5 === void 0 ? void 0 : _err$response5.data) ? err.response.data.error : err.message;\n        dispatch(setAppError(error));\n      }\n    } finally {\n      dispatch(setAppStatus('succeeded'));\n    }\n  }\n}; // enum\n\nvar ResponseStatusCode;\n\n(function (ResponseStatusCode) {\n  ResponseStatusCode[ResponseStatusCode[\"success\"] = 0] = \"success\";\n  ResponseStatusCode[ResponseStatusCode[\"error\"] = 1] = \"error\";\n  ResponseStatusCode[ResponseStatusCode[\"captcha\"] = 10] = \"captcha\";\n})(ResponseStatusCode || (ResponseStatusCode = {}));","map":{"version":3,"names":["tasksAPI","setAppError","setAppStatus","axios","handlerServerAppError","initialState","tasksReducer","state","action","type","todolistId","tasks","payload","task","copyState","todolists","forEach","t","id","newTitle","todolistID","filter","el","taskId","map","model","setTasksAC","addTaskAC","removeTaskAC","changeStatusAC","fetchTasksTC","todoListID","dispatch","response","getTasks","data","items","e","err","isAxiosError","error","message","createTaskTC","title","addTask","item","resultCode","removeTaskTC","removeTask","messages","length","updateStatusTC","status","getState","find","description","priority","startDate","deadline","updateTask","ResponseStatusCode","success","updateTitleTC"],"sources":["E:/IT-Incubator/Todolist-toolkit/src/reducers/tasksReducer.tsx"],"sourcesContent":["import React from 'react';\r\nimport {tasksAPI, TaskStatuses, TaskType, UpdateTaskModelType} from \"../api/todolistsApi\";\r\nimport {AppActionType, AppRootStateType, AppThunk} from \"../store/store\";\r\nimport {setAppError, setAppStatus} from \"./appReducer\";\r\nimport axios, {AxiosError} from \"axios/index\";\r\nimport {handlerServerAppError} from \"../common/utils/errorUtils\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: AppActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case \"SET_TASKS\":\r\n            return {\r\n                ...state, [action.todolistId]: action.tasks\r\n            }\r\n        case 'ADD_TASK': {\r\n            return {\r\n                ...state,\r\n                [action.payload.todolistId]: [action.payload.task, ...state[action.payload.todolistId]]\r\n            }\r\n        }\r\n        case 'SET_TODOLISTS': {\r\n            let copyState = {...state}\r\n            action.todolists.forEach(t => {\r\n                copyState[t.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n\r\n        case 'ADD_TODOLIST': {\r\n            return {...state, [action.newTitle.id]: []}\r\n        }\r\n\r\n        case 'REMOVE_TODOLIST': {\r\n            const copyState = {...state}\r\n            delete copyState[action.todolistID]\r\n            return copyState\r\n        }\r\n\r\n        case 'REMOVE_TASK': {\r\n            return {\r\n                ...state,\r\n                [action.payload.todolistId]: state[action.payload.todolistId].filter(el => el.id !== action.payload.taskId)\r\n            }\r\n        }\r\n\r\n        case 'CHANGE_STATUS': {\r\n            return {\r\n                ...state,\r\n                [action.payload.todolistId]: state[action.payload.todolistId].map(el => el.id === action.payload.taskId\r\n                    ? {...el, ...action.payload.model}\r\n                    : el)\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\n// types\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nexport type TasksActionType =\r\n    | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof changeStatusAC>\r\n\r\n//actions\r\nexport const setTasksAC = (todolistId: string, tasks: TaskType[]) => ({type: 'SET_TASKS', todolistId, tasks} as const)\r\nexport const addTaskAC = (todolistId: string, task: TaskType) => ({\r\n    type: 'ADD_TASK',\r\n    payload: {todolistId, task}\r\n} as const)\r\n\r\nexport const removeTaskAC = (todolistId: string, taskId: string) => {\r\n    return {\r\n        type: 'REMOVE_TASK',\r\n        payload: {\r\n            todolistId,\r\n            taskId\r\n        }\r\n    } as const\r\n}\r\n\r\nexport const changeStatusAC = (todolistId: string, taskId: string, model: UpdateTaskModelType) => {\r\n    return {\r\n        type: 'CHANGE_STATUS',\r\n        payload: {\r\n            todolistId,\r\n            taskId,\r\n            model\r\n        }\r\n    } as const\r\n}\r\n\r\n//thunks\r\nexport const fetchTasksTC = (todoListID: string): AppThunk => async (dispatch) => {\r\n    try {\r\n        let response = await tasksAPI.getTasks(todoListID)\r\n        dispatch(setTasksAC(todoListID, response.data.items))\r\n    } catch (e) {\r\n        let err = e as AxiosError | Error\r\n        if (axios.isAxiosError(err)) {\r\n            const error = err.response?.data\r\n                ? (err.response.data as { error: string }).error\r\n                : err.message\r\n            dispatch(setAppError(error))\r\n        }\r\n    }\r\n\r\n}\r\nexport const createTaskTC = (todolistId: string, title: string): AppThunk => async (dispatch) => {\r\n    dispatch(setAppStatus('loading'))\r\n    try {\r\n        const response = await tasksAPI.addTask(todolistId, title)\r\n        const task = response.data.data.item\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(addTaskAC(todolistId, task))\r\n        } else {\r\n            handlerServerAppError(dispatch, response.data)\r\n        }\r\n    } catch (e) {\r\n        let err = e as AxiosError | Error\r\n        if (axios.isAxiosError(err)) {\r\n            const error = err.response?.data\r\n                ? (err.response.data as { error: string }).error\r\n                : err.message\r\n            dispatch(setAppError(error))\r\n        }\r\n\r\n    } finally {\r\n        dispatch(setAppStatus('succeeded'))\r\n    }\r\n\r\n}\r\n\r\nexport const removeTaskTC = (todolistId: string, taskId: string): AppThunk => async (dispatch) => {\r\n    dispatch(setAppStatus('loading'))\r\n    try {\r\n        const response = await tasksAPI.removeTask(todolistId, taskId)\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(removeTaskAC(todolistId, taskId))\r\n        } else {\r\n            if (response.data.messages.length) {\r\n                dispatch(setAppError(response.data.messages[0]))\r\n            } else {\r\n                dispatch(setAppError('Some error'))\r\n            }\r\n        }\r\n    } catch (e) {\r\n        let err = e as AxiosError | Error\r\n        if (axios.isAxiosError(err)) {\r\n            const error = err.response?.data\r\n                ? (err.response.data as { error: string }).error\r\n                : err.message\r\n            dispatch(setAppError(error))\r\n        }\r\n    } finally {\r\n        dispatch(setAppStatus('succeeded'))\r\n    }\r\n\r\n}\r\n\r\nexport const updateStatusTC = (todolistId: string, taskId: string, status: TaskStatuses): AppThunk => async (dispatch, getState: () => AppRootStateType) => {\r\n    const task = getState().tasks[todolistId].find(t => t.id === taskId)\r\n    if (task) {\r\n        const model: UpdateTaskModelType = {\r\n            title: task.title,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            deadline: task.deadline,\r\n            status\r\n        }\r\n        dispatch(setAppStatus('loading'))\r\n        try {\r\n            const response = await tasksAPI.updateTask(todolistId, taskId, model)\r\n            if (response.data.resultCode === ResponseStatusCode.success) {\r\n                dispatch(changeStatusAC(todolistId, taskId, model))\r\n            } else {\r\n                if (response.data.messages.length) {\r\n                    dispatch(setAppError(response.data.messages[0]))\r\n                } else {\r\n                    dispatch(setAppError('Some error'))\r\n                }\r\n            }\r\n        } catch (e) {\r\n            let err = e as AxiosError | Error\r\n            if (axios.isAxiosError(err)) {\r\n                const error = err.response?.data\r\n                    ? (err.response.data as { error: string }).error\r\n                    : err.message\r\n                dispatch(setAppError(error))\r\n            }\r\n        } finally {\r\n            dispatch(setAppStatus('succeeded'))\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport const updateTitleTC = (todolistId: string, taskId: string, title: string): AppThunk => async (dispatch, getState: () => AppRootStateType) => {\r\n    const task = getState().tasks[todolistId].find(t => t.id === taskId)\r\n    if (task) {\r\n        const model: UpdateTaskModelType = {\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            deadline: task.deadline,\r\n            status: task.status,\r\n            title\r\n        }\r\n        dispatch(setAppStatus('loading'))\r\n        try {\r\n            const response = await tasksAPI.updateTask(todolistId, taskId, model)\r\n            if (response.data.resultCode === ResponseStatusCode.success) {\r\n                dispatch(changeStatusAC(todolistId, taskId, model))\r\n            } else {\r\n                if (response.data.messages.length) {\r\n                    dispatch(setAppError(response.data.messages[0]))\r\n                } else {\r\n                    dispatch(setAppError('Some error'))\r\n                }\r\n            }\r\n        } catch (e) {\r\n            let err = e as AxiosError | Error\r\n            if (axios.isAxiosError(err)) {\r\n                const error = err.response?.data\r\n                    ? (err.response.data as { error: string }).error\r\n                    : err.message\r\n                dispatch(setAppError(error))\r\n            }\r\n        } finally {\r\n            dispatch(setAppStatus('succeeded'))\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// enum\r\nenum ResponseStatusCode {\r\n    success = 0,\r\n    error = 1,\r\n    captcha = 10\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}