{"ast":null,"code":"var _jsxFileName = \"E:\\\\IT-Incubator\\\\Todolist-toolkit\\\\src\\\\components\\\\Login\\\\LoginPage.tsx\";\nimport React from 'react';\nimport Grid from '@mui/material/Grid';\nimport Checkbox from '@mui/material/Checkbox';\nimport FormControl from '@mui/material/FormControl';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormGroup from '@mui/material/FormGroup';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport { useFormik } from \"formik\";\nimport { useAppDispatch, useAppSelector } from \"../../common/hooks/hooks\";\nimport { LoginTC } from \"../../reducers/authReducer\";\nimport { Navigate } from \"react-router-dom\";\nexport const LoginPage = () => {\n  const dispatch = useAppDispatch();\n  const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn);\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n      rememberMe: false\n    },\n    validate: values => {\n      const errors = {};\n\n      if (!values.email) {\n        errors.email = 'Required';\n      } else if (values.email.length < 5) {\n        errors.email = 'Min 5 characters';\n      } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n        errors.email = 'Invalid email address';\n      }\n\n      if (!values.password) {\n        errors.password = 'Required';\n      } else if (values.password.length < 6) {\n        errors.password = 'Min 6 characters';\n      }\n\n      return errors;\n    },\n    onSubmit: values => {\n      dispatch(LoginTC(values));\n    }\n  });\n\n  if (isLoggedIn) {\n    return /*#__PURE__*/React.createElement(Navigate, {\n      to: '/',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 16\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    justifyContent: 'center',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    justifyContent: 'center',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: formik.handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(TextField, Object.assign({\n    id: \"email\",\n    type: \"email\"\n  }, formik.getFieldProps(\"email\"), {\n    label: \"Email\",\n    margin: \"normal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 25\n    }\n  })), formik.touched.email && formik.errors.email && /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      color: 'red'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 29\n    }\n  }, formik.errors.email), /*#__PURE__*/React.createElement(TextField, Object.assign({\n    id: \"password\"\n  }, formik.getFieldProps(\"password\"), {\n    type: \"password\",\n    label: \"Password\",\n    margin: \"normal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 25\n    }\n  })), formik.touched.password && formik.errors.password && /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      color: 'red'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 29\n    }\n  }, formik.errors.password), /*#__PURE__*/React.createElement(FormControlLabel, Object.assign({\n    id: \"rememberMe\"\n  }, formik.getFieldProps(\"rememberMe\"), {\n    checked: formik.values.rememberMe,\n    label: 'Remember me',\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 74\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    type: 'submit',\n    variant: 'contained',\n    color: 'primary',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 25\n    }\n  }, \"Login\"))))));\n};","map":{"version":3,"names":["React","Grid","Checkbox","FormControl","FormControlLabel","FormGroup","TextField","Button","useFormik","useAppDispatch","useAppSelector","LoginTC","Navigate","LoginPage","dispatch","isLoggedIn","state","auth","formik","initialValues","email","password","rememberMe","validate","values","errors","length","test","onSubmit","handleSubmit","getFieldProps","touched","color"],"sources":["E:/IT-Incubator/Todolist-toolkit/src/components/Login/LoginPage.tsx"],"sourcesContent":["import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {useAppDispatch, useAppSelector} from \"../../common/hooks/hooks\";\r\nimport {LoginTC} from \"../../reducers/authReducer\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\ntype ErrorsType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const LoginPage = () => {\r\n\r\n    const dispatch = useAppDispatch()\r\n    const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: values => {\r\n            const errors: ErrorsType = {};\r\n\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (values.email.length < 5) {\r\n                errors.email = 'Min 5 characters';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 6) {\r\n                errors.password = 'Min 6 characters';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(LoginTC(values))\r\n        },\r\n    });\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={'/'}/>\r\n    }\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <FormControl>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormGroup>\r\n                        <TextField id=\"email\" type=\"email\"\r\n                                   {...formik.getFieldProps(\"email\")}\r\n                                   label=\"Email\"\r\n                                   margin=\"normal\"/>\r\n                        {formik.touched.email && formik.errors.email &&\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                        <TextField id=\"password\"\r\n                                   {...formik.getFieldProps(\"password\")}\r\n                                   type=\"password\"\r\n                                   label=\"Password\"\r\n                                   margin=\"normal\"\r\n                        />\r\n                        {formik.touched.password && formik.errors.password &&\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                        <FormControlLabel id=\"rememberMe\"\r\n                                          {...formik.getFieldProps(\"rememberMe\")}\r\n                                          checked={formik.values.rememberMe}\r\n                                          label={'Remember me'} control={<Checkbox/>}/>\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </form>\r\n            </FormControl>\r\n        </Grid>\r\n    </Grid>\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}