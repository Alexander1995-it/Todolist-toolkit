{"version":3,"sources":["components/TodoLists/TodoLists.module.css","serviceWorker.ts","api/todolistsApi.ts","common/hooks/hooks.ts","common/utils/errorUtils.tsx","reducers/authReducer.tsx","reducers/appReducer.tsx","common/ErrorSnacbar/ErrorSnacbar.tsx","components/Header/Header.tsx","common/AddItemForm/AddItemForm.tsx","reducers/todoListsReducer.tsx","reducers/tasksReducer.tsx","common/EtidTitle/EtidTitle.tsx","components/Task/Task.tsx","components/TodoList/TodoList.tsx","components/TodoLists/TodoLists.tsx","components/Login/LoginPage.tsx","App.tsx","store/store.ts","index.tsx","components/Header/Header.module.css","components/TodoList/TodoList.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","ResponseResultCode","useAppDispatch","useDispatch","useAppSelector","useSelector","incstanse","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","todoListID","delete","title","post","tasksAPI","todolistId","taskId","model","put","authApi","data","handlerServerAppError","dispatch","messages","length","setAppError","error","i","slice","createSlice","name","initialState","id","email","login","isLoggedIn","reducers","setAuthMeAC","state","action","payload","value","setLoggedInAC","extraReducers","builder","addCase","logoutTC","fulfilled","LoginTC","authReducer","reducer","actions","createAsyncThunk","param","thunkAPI","setAppStatus","status","response","resultCode","OK","rejectWithValue","err","isAxiosError","message","isInitialized","initializedAppTC","appReducer","Alert","React","props","ref","elevation","variant","CustomizedSnackbars","app","handleClose","event","reason","Stack","spacing","sx","width","Snackbar","open","autoHideDuration","onClose","severity","Header","auth","Box","flexGrow","AppBar","position","Toolbar","Typography","component","className","style","loginBlock","loginText","loginIcon","onClick","AddItemForm","callBack","useState","setTitle","TextField","size","onChange","e","currentTarget","label","Button","disabled","maxWidth","maxHeight","minWidth","minHeight","changeFilterAC","index","findIndex","todolist","todolistID","filter","changeTodolistEntityStatusAC","entityStatus","fetchTodolistsTC","todolists","map","createTodolistTC","unshift","newTodolist","deleteTodolistsTC","splice","todolistsReducer","item","forEach","fetchTasksTC","tasks","removeTaskTC","task","createTaskTC","updateTaskTC","tasksReducer","ResponseStatusCode","getState","find","t","description","priority","startDate","deadline","success","items","params","console","log","EditableSpan","edit","setEdit","newTitle","setNewTitle","editHandler","onBlur","autoFocus","onDoubleClick","Task","memo","Checkbox","defaultChecked","newIsDoneValue","checked","Completed","New","editTaskHandler","TodoList","useEffect","todoList","todoListBlock","title__delete","IconButton","aria-label","listTodo","key","color","TodoLists","todoLists","addTodolistBlock","Grid","container","el","Paper","padding","to","LoginPage","formik","useFormik","initialValues","password","rememberMe","validate","values","errors","test","onSubmit","justifyContent","FormControl","handleSubmit","FormGroup","type","getFieldProps","margin","touched","FormControlLabel","control","App","height","LinearProgress","path","element","top","textAlign","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.bb7d6788.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"addTodolistBlock\":\"TodoLists_addTodolistBlock__307UL\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import axios, {AxiosResponse} from \"axios\";\r\nimport {UpdateTaskModelType} from \"../reducers/tasksReducer\";\r\n\r\n\r\nconst incstanse = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'da9cb287-f4c3-4451-9409-0a992045ae44'\r\n    }\r\n})\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return incstanse.get<TodolistType[]>('todo-lists')\r\n    },\r\n    deleteTodolists(todoListID: string) {\r\n        return incstanse.delete<ResponseType>(`todo-lists/${todoListID}`)\r\n    },\r\n    addTodolist(title: string) {\r\n        return incstanse.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title})\r\n    }\r\n}\r\n\r\nexport const tasksAPI = {\r\n    getTasks(todolistId: string) {\r\n        return incstanse.get(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    addTask(todolistId: string, title: string) {\r\n        return incstanse.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    removeTask(todolistId: string, taskId: string) {\r\n        return incstanse.delete<ResponseType>(`/todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return incstanse.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    }\r\n}\r\n\r\nexport const authApi = {\r\n    authMe() {\r\n        return incstanse.get<ResponseType<AuthMeResponse>>('auth/me')\r\n    },\r\n    login(data: LoginRequestType) {\r\n        return incstanse.post<LoginRequestType, AxiosResponse<ResponseType<{userId: number}>>>('auth/login', data)\r\n    }, logout () {\r\n        return incstanse.delete<ResponseType>('auth/login')\r\n    }\r\n}\r\n\r\n//enum\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport enum ResponseResultCode {\r\n    OK = 0,\r\n    ERROR = 1\r\n}\r\n\r\n\r\n//typesCommon\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n//typesTask\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\n//typesTodolist\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\n//typesAuth\r\nexport type AuthMeResponse = {\r\n    email: string\r\n    id: number\r\n    login: string\r\n}\r\n\r\nexport type LoginRequestType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: boolean\r\n}\r\n\r\n\r\n","import {TypedUseSelectorHook, useDispatch, useSelector} from \"react-redux\";\r\nimport {AppDispatch, AppRootStateType} from \"../../store/store\";\r\n\r\n\r\nexport const useAppDispatch: () => AppDispatch = useDispatch\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector","import {setAppError, SetAppErrorType} from \"../../reducers/appReducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ResponseType} from \"../../api/todolistsApi\";\r\n\r\n\r\nexport const handlerServerAppError = (dispatch: ErrorUtilsDispatchType, data: ResponseType) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppError({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppError({error: 'Some error'}))\r\n    }\r\n}\r\n\r\n//types\r\ntype ErrorUtilsDispatchType = Dispatch<SetAppErrorType>","import {authApi, LoginRequestType, ResponseResultCode} from \"../api/todolistsApi\";\r\nimport axios, {AxiosError} from \"axios/index\";\r\nimport {setAppError, setAppStatus} from \"./appReducer\";\r\nimport {handlerServerAppError} from \"../common/utils/errorUtils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst initialState = {\r\n    id: null as null | number,\r\n    email: null as null | string,\r\n    login: null as null | string,\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAuthMeAC(state, action: PayloadAction<{ value: { id: number | null, email: string | null, login: string | null }, isLoggedIn: boolean }>) {\r\n            state.isLoggedIn = action.payload.isLoggedIn\r\n            state.id = action.payload.value.id\r\n            state.login = action.payload.value.login\r\n            state.email = action.payload.value.email\r\n        },\r\n        setLoggedInAC(state, action: PayloadAction<{ isLoggedIn: boolean }>) {\r\n            state.isLoggedIn = action.payload.isLoggedIn\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(logoutTC.fulfilled, (state, action) => {\r\n            state.isLoggedIn = action.payload.isLoggedIn\r\n        })\r\n        builder.addCase(LoginTC.fulfilled, (state, action) => {\r\n            state.isLoggedIn = action.payload.isLoggedIn\r\n        })\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setAuthMeAC, setLoggedInAC} = slice.actions\r\n\r\nexport const LoginTC = createAsyncThunk('auth/login', async (param: LoginRequestType, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        let response = await authApi.login(param)\r\n        if (response.data.resultCode === ResponseResultCode.OK) {\r\n            thunkAPI.dispatch(setLoggedInAC({isLoggedIn: true}))\r\n            return {isLoggedIn: true}\r\n        } else {\r\n            handlerServerAppError(thunkAPI.dispatch, response.data)\r\n            return thunkAPI.rejectWithValue({})\r\n        }\r\n    } catch (e) {\r\n        let err = e as AxiosError | Error\r\n        if (axios.isAxiosError(err)) {\r\n            const error = err.response?.data\r\n                ? (err.response.data as { error: string }).error\r\n                : err.message\r\n            thunkAPI.dispatch(setAppError({error}))\r\n        }\r\n        return thunkAPI.rejectWithValue({})\r\n    } finally {\r\n        thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n    }\r\n})\r\n\r\n\r\n//thunk\r\n\r\nexport const logoutTC = createAsyncThunk('auth/logout', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        let response = await authApi.logout()\r\n        if (response.data.resultCode === 0) {\r\n            return {isLoggedIn: false}\r\n        } else {\r\n            handlerServerAppError(thunkAPI.dispatch, response.data)\r\n            return thunkAPI.rejectWithValue({})\r\n\r\n\r\n        }\r\n    } catch (e) {\r\n        let err = e as AxiosError | Error\r\n        if (axios.isAxiosError(err)) {\r\n            const error = err.response?.data\r\n                ? (err.response.data as { error: string }).error\r\n                : err.message\r\n            thunkAPI.dispatch(setAppError({error}))\r\n        }\r\n        return thunkAPI.rejectWithValue({isLoggedIn: true})\r\n    } finally {\r\n        thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n    }\r\n})\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {authApi, ResponseResultCode} from \"../api/todolistsApi\";\r\nimport {handlerServerAppError} from \"../common/utils/errorUtils\";\r\nimport axios, {AxiosError} from \"axios\";\r\nimport {setAuthMeAC} from \"./authReducer\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as null | string,\r\n    isInitialized: false\r\n}\r\n\r\nconst slice = createSlice(({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatus(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppError(state, action: PayloadAction<{ error: string | null }>) {\r\n            state.error = action.payload.error\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(initializedAppTC.fulfilled, (state, action) => {\r\n            state.isInitialized = action.payload.value\r\n        })\r\n    }\r\n\r\n}))\r\n\r\nexport const appReducer = slice.reducer\r\nexport const {setAppStatus, setAppError} = slice.actions\r\n\r\nexport const initializedAppTC = createAsyncThunk ('app/initialized', async (param, thunkAPI) => {\r\n    try {\r\n        let response = await authApi.authMe()\r\n        if (response.data.resultCode === ResponseResultCode.OK) {\r\n            thunkAPI.dispatch(setAuthMeAC({value: response.data.data, isLoggedIn: true}))\r\n        } else {\r\n            handlerServerAppError(thunkAPI.dispatch, response.data)\r\n            return thunkAPI.rejectWithValue({})\r\n        }\r\n    } catch (e) {\r\n        let err = e as AxiosError | Error\r\n        if (axios.isAxiosError(err)) {\r\n            const error = err.response?.data\r\n                ? (err.response.data as { error: string }).error\r\n                : err.message\r\n            thunkAPI.dispatch(setAppError({error}))\r\n            return thunkAPI.rejectWithValue({})\r\n        }\r\n    } finally {\r\n        return {value: true}\r\n    }\r\n})\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\n\r\n//types\r\nexport type AppActionsType = SetAppStatusType | SetAppErrorType\r\nexport type SetAppStatusType = ReturnType<typeof setAppStatus>\r\nexport type SetAppErrorType = ReturnType<typeof setAppError>\r\n\r\n","import * as React from 'react';\r\nimport Stack from '@mui/material/Stack';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useAppDispatch, useAppSelector} from \"../hooks/hooks\";\r\nimport {setAppError} from \"../../reducers/appReducer\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport default function CustomizedSnackbars() {\r\n\r\n    const error = useAppSelector<string | null>(state => state.app.error)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppError({error: null}))\r\n    };\r\n\r\n    return (\r\n        <Stack spacing={2} sx={{width: '100%'}}>\r\n            <Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                    {error}\r\n                </Alert>\r\n            </Snackbar>\r\n        </Stack>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport Box from \"@mui/material/Box\";\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport {useAppDispatch, useAppSelector} from \"../../common/hooks/hooks\";\r\nimport {logoutTC} from \"../../reducers/authReducer\";\r\nimport style from './Header.module.css'\r\nimport LogoutIcon from '@mui/icons-material/Logout';\r\n\r\nconst Header = () => {\r\n\r\n    const dispatch = useAppDispatch()\r\n    const login = useAppSelector(state => state.auth)\r\n\r\n    const logOutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Box sx={{flexGrow: 1}}>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\r\n                            TodoList\r\n                        </Typography>\r\n                        {login.isLoggedIn &&\r\n                            <div className={style.loginBlock}>\r\n                                <div className={style.loginText}>{login.login}</div>\r\n                                <div className={style.loginIcon}><LogoutIcon onClick={logOutHandler}/></div>\r\n                            </div>\r\n                        }\r\n                    </Toolbar>\r\n                </AppBar>\r\n            </Box>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;","import React, {ChangeEvent, useState} from 'react';\r\nimport {Button, TextField} from \"@mui/material\";\r\n\r\ntype AddItemFormPropsType = {\r\n    callBack: (title: string) => void\r\n    disabled?: boolean\r\n    label?: string\r\n\r\n}\r\n\r\nconst AddItemForm = (props: AddItemFormPropsType) => {\r\n\r\n    const {callBack} = props\r\n    let [title, setTitle] = useState('')\r\n\r\n    const onClickHandler = () => {\r\n        callBack(title)\r\n        setTitle('')\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                size={'small'}\r\n                onChange={onChangeHandler}\r\n                value={title}\r\n                id=\"outlined-basic\"\r\n                label={props.label ? props.label : 'Outlined'}\r\n                variant='outlined'/>\r\n            <Button\r\n                onClick={onClickHandler}\r\n                disabled={props.disabled}\r\n                variant=\"contained\"\r\n                style={{maxWidth: '38px', maxHeight: '38px', minWidth: '38px', minHeight: '38px'}}\r\n            >\r\n                +\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddItemForm;","import React from 'react';\r\nimport {ResponseResultCode, todolistsAPI, TodolistType} from \"../api/todolistsApi\";\r\nimport axios, {AxiosError} from \"axios\";\r\nimport {RequestStatusType, setAppError, setAppStatus} from \"./appReducer\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nconst slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: initialState,\r\n    reducers: {\r\n        changeFilterAC(state, action: PayloadAction<{ todolistID: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(todolist => todolist.id === action.payload.todolistID)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ todolistID: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(todolist => todolist.id === action.payload.todolistID)\r\n            state[index].entityStatus = action.payload.status\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n            return action.payload.todolists.map(todolist => ({...todolist, filter: 'all', entityStatus: 'idle'}))\r\n        })\r\n        builder.addCase(createTodolistTC.fulfilled, (state, action) => {\r\n            state.unshift({...action.payload.newTodolist, filter: 'all', entityStatus: 'idle'})\r\n        })\r\n        builder.addCase(deleteTodolistsTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(todolist => todolist.id === action.payload.todolistID)\r\n            state.splice(index, 1)\r\n        })\r\n    }\r\n})\r\n\r\nexport const todolistsReducer = slice.reducer\r\nexport const {\r\n    changeTodolistEntityStatusAC,\r\n    changeFilterAC\r\n} = slice.actions\r\n\r\n\r\nexport type TodoListsActionType =\r\n    | ReturnType<typeof changeFilterAC>\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\n\r\nexport const fetchTodolistsTC = createAsyncThunk('todolists/fetchTodolists', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        let response = await todolistsAPI.getTodolists()\r\n        return {todolists: response.data}\r\n    } catch (e) {\r\n        let err = e as AxiosError | Error\r\n        if (axios.isAxiosError(err)) {\r\n            const error = err.response?.data\r\n                ? (err.response.data as { message: string }).message\r\n                : err.message\r\n            thunkAPI.dispatch(setAppError({error}))\r\n        }\r\n        return thunkAPI.rejectWithValue({})\r\n    } finally {\r\n        thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n    }\r\n})\r\n\r\nexport const createTodolistTC = createAsyncThunk('todolists/createTodolist', async (newTodolist: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        let response = await todolistsAPI.addTodolist(newTodolist)\r\n        return {newTodolist: response.data.data.item}\r\n    } catch (e) {\r\n        let err = e as AxiosError | Error\r\n        if (axios.isAxiosError(err)) {\r\n            const error = err.response?.data\r\n                ? (err.response.data as { error: string }).error\r\n                : err.message\r\n            thunkAPI.dispatch(setAppError({error}))\r\n        }\r\n        return thunkAPI.rejectWithValue({})\r\n    } finally {\r\n        thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n    }\r\n})\r\n\r\nexport const deleteTodolistsTC = createAsyncThunk('todolists/deleteTodolist', async (todolistID: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    thunkAPI.dispatch(changeTodolistEntityStatusAC({todolistID, status: 'loading'}))\r\n    try {\r\n        const response = await todolistsAPI.deleteTodolists(todolistID)\r\n        if (response.data.resultCode === ResponseResultCode.OK) {\r\n            return {todolistID}\r\n        }\r\n        return thunkAPI.rejectWithValue({})\r\n    } catch (e) {\r\n        let err = e as AxiosError | Error\r\n        if (axios.isAxiosError(err)) {\r\n            const error = err.response?.data\r\n                ? (err.response.data as { error: string }).error\r\n                : err.message\r\n            thunkAPI.dispatch(setAppError({error}))\r\n        }\r\n       return thunkAPI.rejectWithValue({})\r\n    } finally {\r\n        thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n        thunkAPI.dispatch(changeTodolistEntityStatusAC({todolistID, status: 'succeeded'}))\r\n    }\r\n})\r\n//thunks\r\n\r\n\r\n//types\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport {TaskPriorities, tasksAPI, TaskStatuses, TaskType} from \"../api/todolistsApi\";\r\nimport {AppRootStateType} from \"../store/store\";\r\nimport {setAppError, setAppStatus} from \"./appReducer\";\r\nimport axios, {AxiosError} from \"axios/index\";\r\nimport {handlerServerAppError} from \"../common/utils/errorUtils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {createTodolistTC, deleteTodolistsTC, fetchTodolistsTC} from \"./todoListsReducer\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder.addCase(createTodolistTC.fulfilled, (state, action) => {\r\n            state[action.payload.newTodolist.id] = []\r\n        })\r\n        builder.addCase(deleteTodolistsTC.fulfilled, (state, action) => {\r\n            delete state[action.payload.todolistID]\r\n        })\r\n        builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n            action.payload.todolists.forEach(todolist => {\r\n                state[todolist.id] = []\r\n            })\r\n        })\r\n        builder.addCase(fetchTasksTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        })\r\n        builder.addCase(removeTaskTC.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(task => task.id === action.payload.taskId)\r\n            tasks.splice(index, 1)\r\n        })\r\n        builder.addCase(createTaskTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolistId].unshift(action.payload.task)\r\n        })\r\n        builder.addCase(updateTaskTC.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(task => task.id === action.payload.taskId)\r\n            tasks[index] = {...tasks[index], ...action.payload.model}\r\n        })\r\n    }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer\r\nexport const {} = slice.actions\r\n\r\nexport const updateTaskTC = createAsyncThunk('tasks/updateTitle', async (param: { todolistId: string, taskId: string, model: UpdateTaskModelType }, thunkAPI) => {\r\n    const state = thunkAPI.getState() as AppRootStateType\r\n    const task = state.tasks[param.todolistId].find(t => t.id === param.taskId)\r\n    if (!task) {\r\n        return thunkAPI.rejectWithValue({})\r\n    }\r\n    const model: UpdateTaskModelType = {\r\n        description: task.description,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        deadline: task.deadline,\r\n        status: task.status,\r\n        title: task.title,\r\n        ...param.model\r\n    }\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const response = await tasksAPI.updateTask(param.todolistId, param.taskId, model)\r\n        if (response.data.resultCode === ResponseStatusCode.success) {\r\n            return {todolistId: param.todolistId, taskId: param.taskId, model}\r\n        } else {\r\n            if (response.data.messages.length) {\r\n                thunkAPI.dispatch(setAppError({error: response.data.messages[0]}))\r\n            } else {\r\n                thunkAPI.dispatch(setAppError({error: 'Some error'}))\r\n            }\r\n            return thunkAPI.rejectWithValue({})\r\n        }\r\n\r\n    } catch (e) {\r\n        let err = e as AxiosError | Error\r\n        if (axios.isAxiosError(err)) {\r\n            const error = err.response?.data\r\n                ? (err.response.data as { error: string }).error\r\n                : err.message\r\n            thunkAPI.dispatch(setAppError({error}))\r\n        }\r\n        return thunkAPI.rejectWithValue({})\r\n    } finally {\r\n        thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n    }\r\n})\r\n\r\n\r\nexport const fetchTasksTC = createAsyncThunk('tasks/fetchTasks', async (todolistId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        let response = await tasksAPI.getTasks(todolistId)\r\n        const tasks = response.data.items\r\n        return {todolistId, tasks}\r\n    } catch (e) {\r\n        let err = e as AxiosError | Error\r\n        if (axios.isAxiosError(err)) {\r\n            const error = err.response?.data\r\n                ? (err.response.data as { error: string }).error\r\n                : err.message\r\n            thunkAPI.dispatch(setAppError({error}))\r\n        }\r\n        return thunkAPI.rejectWithValue({})\r\n    } finally {\r\n        thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n    }\r\n})\r\n\r\nexport const createTaskTC = createAsyncThunk('tasks/createTask', async (params: { todolistId: string, title: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const response = await tasksAPI.addTask(params.todolistId, params.title)\r\n        if (response.data.resultCode === 0) {\r\n            console.log(thunkAPI.getState())\r\n            const task = response.data.data.item\r\n            return {todolistId: params.todolistId, task}\r\n        } else {\r\n            handlerServerAppError(thunkAPI.dispatch, response.data)\r\n            const task = response.data.data.item\r\n            return thunkAPI.rejectWithValue({})\r\n\r\n        }\r\n    } catch (e) {\r\n        return thunkAPI.rejectWithValue({})\r\n    } finally {\r\n        thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n    }\r\n})\r\n\r\n\r\nexport const removeTaskTC = createAsyncThunk('tasks/removeTask', async (param: { todolistId: string, taskId: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const response = await tasksAPI.removeTask(param.todolistId, param.taskId)\r\n        if (response.data.resultCode === 0) {\r\n            return {todolistId: param.todolistId, taskId: param.taskId}\r\n        } else {\r\n            if (response.data.messages.length) {\r\n                thunkAPI.dispatch(setAppError({error: response.data.messages[0]}))\r\n            } else {\r\n                thunkAPI.dispatch(setAppError({error: 'Some error'}))\r\n            }\r\n            return thunkAPI.rejectWithValue({})\r\n        }\r\n    } catch (e) {\r\n        let err = e as AxiosError | Error\r\n        if (axios.isAxiosError(err)) {\r\n            const error = err.response?.data\r\n                ? (err.response.data as { error: string }).error\r\n                : err.message\r\n            thunkAPI.dispatch(setAppError({error}))\r\n        }\r\n        return thunkAPI.rejectWithValue({})\r\n    } finally {\r\n        thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n    }\r\n\r\n})\r\n\r\n// enum\r\nenum ResponseStatusCode {\r\n    success = 0,\r\n    error = 1,\r\n    captcha = 10\r\n}\r\n\r\n// types\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nexport type UpdateTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\n\r\n","import React, {ChangeEvent, useState} from 'react';\r\n\r\ntype EtidTitlePropsType = {\r\n    title: string\r\n    callBack: (title: string) => void\r\n\r\n}\r\n\r\nexport const EditableSpan = (props: EtidTitlePropsType) => {\r\n\r\n    const [edit, setEdit] = useState(false)\r\n    const [newTitle, setNewTitle] = useState(props.title)\r\n\r\n    const addTask = () => {\r\n        if (newTitle !== '') {\r\n            props.callBack (newTitle)\r\n        }\r\n    }\r\n\r\n    const editHandler = () => {\r\n        setEdit(!edit)\r\n        addTask ()\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        edit\r\n        ? <input value={newTitle} onChange={onChangeHandler} onBlur={editHandler} autoFocus/>\r\n        : <span onDoubleClick={editHandler}>{props.title}</span>\r\n    )\r\n}\r\n\r\n","import React, {ChangeEvent} from 'react';\r\nimport {Checkbox} from \"@mui/material\";\r\nimport {EditableSpan} from \"../../common/EtidTitle/EtidTitle\";\r\nimport {removeTaskTC, updateTaskTC} from \"../../reducers/tasksReducer\";\r\nimport {TaskStatuses, TaskType} from \"../../api/todolistsApi\";\r\nimport {useAppDispatch} from \"../../common/hooks/hooks\";\r\n\r\n\r\nexport type TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\n\r\nconst Task = React.memo(({task, todolistId}: TaskPropsType) => {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const editTaskHandler = (todolistId: string, taskId: string, newTitle: string) => {\r\n        dispatch(updateTaskTC({todolistId, taskId, model: {title: newTitle}}))\r\n    }\r\n    const onHandlerDelete = () => dispatch(removeTaskTC({todolistId, taskId: task.id}))\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        dispatch(updateTaskTC({\r\n            todolistId,\r\n            taskId: task.id,\r\n            model: {status: newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New}\r\n        }))\r\n    }\r\n\r\n    return (\r\n        <li className={task.status === 1 ? \"is-done\" : \"\"}>\r\n            <Checkbox defaultChecked onChange={onChangeHandler} checked={task.status === 2}/>\r\n            <EditableSpan callBack={(title) => editTaskHandler(todolistId, task.id, title)} title={task.title}/>\r\n            <button onClick={onHandlerDelete}>x</button>\r\n        </li>\r\n    );\r\n});\r\n\r\nexport default Task;\r\n\r\n","import React, {useEffect} from 'react';\r\nimport AddItemForm from \"../../common/AddItemForm/AddItemForm\";\r\nimport IconButton from '@mui/material/IconButton';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport style from '../../components/TodoList/TodoList.module.css'\r\nimport {changeFilterAC, deleteTodolistsTC, TodolistDomainType} from \"../../reducers/todoListsReducer\";\r\nimport {createTaskTC, fetchTasksTC} from \"../../reducers/tasksReducer\";\r\nimport Task from \"../Task/Task\";\r\nimport {useAppDispatch, useAppSelector} from \"../../common/hooks/hooks\";\r\nimport {TaskStatuses, TaskType} from \"../../api/todolistsApi\";\r\nimport {Button} from \"@mui/material\";\r\n\r\n\r\ntype PropsType = {\r\n    todoList: TodolistDomainType\r\n    title: string\r\n}\r\n\r\nexport const TodoList = React.memo ((props: PropsType) => {\r\n\r\n    let dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.todoList.id))\r\n    }, [])\r\n    let tasks = useAppSelector<TaskType[]>(state => state.tasks[props.todoList.id])\r\n\r\n//handlerFilter\r\n    const onAllClickHandler = () => dispatch(changeFilterAC({todolistID: props.todoList.id, filter: \"all\"}));\r\n    const onActiveClickHandler = () => dispatch(changeFilterAC({todolistID: props.todoList.id, filter: \"active\"}));\r\n    const onCompletedClickHandler = () => dispatch(changeFilterAC({todolistID: props.todoList.id, filter: \"completed\"}));\r\n\r\n    const onClickDeleteTodoList = () => dispatch(deleteTodolistsTC(props.todoList.id))\r\n\r\n    const addTaskHandler = (newTitle: string) => {\r\n        dispatch(createTaskTC({todolistId: props.todoList.id, title: newTitle}))\r\n    }\r\n\r\n    if (props.todoList.filter === \"active\") {\r\n        tasks = tasks.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (props.todoList.filter === \"completed\") {\r\n        tasks = tasks.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n    return <div className={style.todoListBlock}>\r\n        <div className={style.title__delete}>\r\n            <h3>{props.title}</h3>\r\n            <IconButton\r\n                onClick={onClickDeleteTodoList}\r\n                disabled={props.todoList.entityStatus === 'loading'}\r\n                aria-label=\"delete\">\r\n                <DeleteIcon/>\r\n            </IconButton>\r\n        </div>\r\n        <div>\r\n            <AddItemForm label='Add task' disabled={props.todoList.entityStatus === 'loading'}\r\n                         callBack={addTaskHandler}/>\r\n        </div>\r\n        <ul className={style.listTodo}>\r\n            {\r\n                tasks.map(t => <Task key={t.id} task={t} todolistId={props.todoList.id}/>)\r\n            }\r\n        </ul>\r\n        <div>\r\n\r\n            <Button variant={props.todoList.filter === 'all' ? \"contained\" : \"text\"} color=\"success\"\r\n                    onClick={onAllClickHandler}>All</Button>\r\n            <Button variant={props.todoList.filter === 'active' ? \"contained\" : \"text\"} color=\"secondary\"\r\n                    onClick={onActiveClickHandler}>Active</Button>\r\n            <Button variant={props.todoList.filter === 'completed' ? \"contained\" : \"text\"} color=\"error\"\r\n                    onClick={onCompletedClickHandler}>Completed</Button>\r\n\r\n        </div>\r\n    </div>\r\n})\r\n","import React, {useEffect} from 'react';\r\nimport AddItemForm from \"../../common/AddItemForm/AddItemForm\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport {TodoList} from \"../TodoList/TodoList\";\r\nimport {useAppDispatch, useAppSelector} from \"../../common/hooks/hooks\";\r\nimport {createTodolistTC, fetchTodolistsTC, TodolistDomainType} from \"../../reducers/todoListsReducer\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport style from './TodoLists.module.css'\r\n\r\nconst TodoLists = () => {\r\n\r\n    let todoLists = useAppSelector<Array<TodolistDomainType>>(state => state.todolists)\r\n    const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        if (isLoggedIn) {\r\n            dispatch(fetchTodolistsTC())\r\n        }\r\n    }, [])\r\n\r\n    const addTodoList = (newTitle: string) => {\r\n        dispatch(createTodolistTC(newTitle))\r\n    }\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n    return (\r\n        <div className='mainBlock'>\r\n           <div className={style.addTodolistBlock}>\r\n               <AddItemForm label='Add todoList' callBack={addTodoList}/>\r\n           </div>\r\n            <Grid container spacing={3}>\r\n                {todoLists.map(el => {\r\n                    return <Grid key={el.id} item>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <TodoList\r\n                                key={el.id}\r\n                                title={el.title}\r\n                                todoList={el}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })}\r\n            </Grid>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodoLists;","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {useAppDispatch, useAppSelector} from \"../../common/hooks/hooks\";\r\nimport {LoginTC} from \"../../reducers/authReducer\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\ntype ErrorsType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const LoginPage = () => {\r\n\r\n\r\n    const dispatch = useAppDispatch()\r\n    const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: values => {\r\n            const errors: ErrorsType = {};\r\n\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (values.email.length < 5) {\r\n                errors.email = 'Min 5 characters';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 6) {\r\n                errors.password = 'Min 6 characters';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(LoginTC(values))\r\n        },\r\n    });\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={'/'}/>\r\n    }\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <FormControl>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormGroup>\r\n                        <TextField id=\"email\" type=\"email\"\r\n                                   {...formik.getFieldProps(\"email\")}\r\n                                   label=\"Email\"\r\n                                   margin=\"normal\"/>\r\n                        {formik.touched.email && formik.errors.email &&\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                        <TextField id=\"password\"\r\n                                   {...formik.getFieldProps(\"password\")}\r\n                                   type=\"password\"\r\n                                   label=\"Password\"\r\n                                   margin=\"normal\"\r\n                        />\r\n                        {formik.touched.password && formik.errors.password &&\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                        <FormControlLabel id=\"rememberMe\"\r\n                                          {...formik.getFieldProps(\"rememberMe\")}\r\n                                          checked={formik.values.rememberMe}\r\n                                          label={'Remember me'} control={<Checkbox/>}/>\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </form>\r\n            </FormControl>\r\n        </Grid>\r\n    </Grid>\r\n}","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {useAppDispatch, useAppSelector} from \"./common/hooks/hooks\";\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {initializedAppTC, RequestStatusType} from \"./reducers/appReducer\";\r\nimport CustomizedSnackbars from \"./common/ErrorSnacbar/ErrorSnacbar\";\r\nimport Header from \"./components/Header/Header\";\r\nimport TodoLists from \"./components/TodoLists/TodoLists\";\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {LoginPage} from \"./components/Login/LoginPage\";\r\nimport {CircularProgress} from \"@mui/material\";\r\n\r\nconst App = () => {\r\n\r\n    const status = useAppSelector<RequestStatusType>(state => state.app.status)\r\n    const isInitialized = useAppSelector(state => state.app.isInitialized)\r\n    const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializedAppTC())\r\n    }, [isLoggedIn])\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Header/>\r\n            <div style={{height: '10px'}}>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </div>\r\n            <CustomizedSnackbars/>\r\n            <Routes>\r\n                <Route path='/' element={<TodoLists/>}></Route>\r\n                <Route path='/login' element={<LoginPage/>}></Route>\r\n                <Route path='/404' element={<div>404: page not found</div>}></Route>\r\n                <Route path='/*' element={<Navigate to='/404'/>}/>\r\n            </Routes>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n","import {combineReducers} from \"redux\";\r\nimport {tasksReducer} from \"../reducers/tasksReducer\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {AppActionsType, appReducer} from \"../reducers/appReducer\";\r\nimport {authReducer} from \"../reducers/authReducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport {TodoListsActionType, todolistsReducer} from \"../reducers/todoListsReducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    app: appReducer,\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    auth: authReducer\r\n})\r\n\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\n\r\nexport type AppRootStateType = ReturnType<typeof store.getState>\r\n\r\nexport type AppActionType = TodoListsActionType | AppActionsType\r\n\r\nexport type AppDispatch = typeof store.dispatch\r\n\r\n// export type AppDispatch = ThunkDispatch<AppRootStateType, unknown, AppActionType>\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppRootStateType, unknown, AppActionType>","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from \"./App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./store/store\";\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n            <App/>\r\n        </HashRouter>\r\n    </Provider>, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginBlock\":\"Header_loginBlock__1y6m-\",\"loginText\":\"Header_loginText__2UHEZ\",\"loginIcon\":\"Header_loginIcon__204ez\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoListBlock\":\"TodoList_todoListBlock__2UEJd\",\"title__delete\":\"TodoList_title__delete__2lbJe\",\"listTodo\":\"TodoList_listTodo__12z3k\"};"],"sourceRoot":""}